# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
theme_minimal()
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(size = NULL, fill = NULL) +
theme_minimal()
p
theme_minimal()
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(fill = "none", size = "none")+
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(fill = "none", size = "none") + theme(legend.position = "bottom")
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") + theme(legend.position = "bottom") +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") + theme(legend.position = "bottom") +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") +
theme_minimal() + theme(legend.position = "bottom")
p
#| warning: false
#| message: false
# load packages
library(tibble)
library(ggplot2)
library(dplyr)
library(readr)
library(grf)
library(e1071)
library(plotly)
library(shiny)
library(htmlwidgets)
library(DT)
library(kableExtra)
# set seed
set.seed(42)
# Read in data
data <- read.csv("https://docs.google.com/uc?id=1AQva5-vDlgBcM_Tv9yrO8yMYRfQJgqo_&export=download")
reticulate::repl_python()
n <- nrow(data)
# Treatment: does the the gov't spend too much on "welfare" (1) or "assistance to the poor" (0)
treatment <- "w"
# Outcome: 1 for 'yes', 0 for 'no'
outcome <- "y"
# Additional covariates
covariates <- c("age", "polviews", "income", "educ", "marital", "sex")
reticulate::repl_python()
# Data preparation
data_c <- data[data[,treatment] == 0,] |> select(all_of(c(outcome, covariates)))
n_control <- nrow(data_c)
data_c_training <- data_c[1:10000,]
data_c_testing <- data_c[10001:n_control,]
# Random forest
forest <- grf::regression_forest(
X = data_c_training[,covariates],
Y = data_c_training[,outcome],
honesty = FALSE,
tune.parameters = "all",
num.trees = 1000,
seed = 42
)
# Naive Bayes
nb <- naiveBayes(
formula = as.formula(paste0(outcome, " ~ ", paste0(covariates, collapse = "+"))),
data = data_c_training
)
# Data preparation
data_c <- data[data[,treatment] == 0,] |> select(all_of(c(outcome, covariates)))
n_control <- nrow(data_c)
data_c_training <- data_c[1:10000,]
data_c_testing <- data_c[10001:n_control,]
# Random forest
forest <- grf::regression_forest(
X = data_c_training[,covariates],
Y = data_c_training[,outcome],
honesty = FALSE,
tune.parameters = "all",
num.trees = 1000,
seed = 42
)
# Naive Bayes
nb <- naiveBayes(
formula = as.formula(paste0(outcome, " ~ ", paste0(covariates, collapse = "+"))),
data = data_c_training
)
# Generate predictions on test data
forest_pred <- predict(forest, data_c_testing[,covariates])$predictions
nb_pred <- predict(nb, data_c_testing, type = "raw")[,2]
# Create data frame for plotting
plot_data <- data.frame(
actual = data_c_testing[,outcome],
forest_pred = forest_pred,
nb_pred = nb_pred
)
kableExtra::kable(head(plot_data)) |> kable_styling(bootstrap_options = c("striped", "hover"))
#| fig-width: 12
#| fig-height: 8
# Simple calibration plot with 10 bins
n_bins <- 10
rf_bins <- cut(plot_data$forest_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
nb_bins <- cut(plot_data$nb_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(actual, rf_bins, sd)/count
)
nb_bin_stats <- tibble(
bin_center = tapply(plot_data$nb_pred, nb_bins, mean),
empirical_prob = tapply(plot_data$actual, nb_bins, mean),
count = as.numeric(table(nb_bins)),
empirical_se = tapply(actual, nb_bins, sd)/count
)
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(nb_bin_stats, model = "Naive Bayes"))
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") +
theme_minimal() + theme(legend.position = "bottom")
# Display plot
p
p
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n_bins, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") +
theme_minimal() + theme(legend.position = "bottom")
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n_bins, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") +
theme_minimal() + theme(legend.position = "bottom")
?cut
rf_bin_stats
rf_bins
install.packages("predtools")
library(predtools)
?calibration_plot
dev_data
?ntile
ntile(1:100)
ntile(1:100, 10)
ntile(1:100, 5)
?multinom
?requireNamespace
?loadNamespace
#| warning: false
#| message: false
# load packages
pkgs <- c("tibble", "ggplot2", "dplyr", "readr", "grf", "nnet", "e1071", "plotly", "shiny", "htmlwidgets", "DT", "kableExtra", "patchwork")
for (pkg in pkgs) loadNamespace(pkg, quietly = TRUE)
#| warning: false
#| message: false
# load packages
pkgs <- c("tibble", "ggplot2", "dplyr", "readr", "grf", "nnet", "e1071", "plotly", "shiny", "htmlwidgets", "DT", "kableExtra", "patchwork")
for (pkg in pkgs) loadNamespace(pkg)
# set seed
set.seed(42)
#| warning: false
#| message: false
# load packages
library(tibble)
library(ggplot2)
library(dplyr)
library(readr)
library(grf)
library(nnet)
library(e1071)
library(plotly)
library(shiny)
library(htmlwidgets)
library(DT)
library(kableExtra)
library(patchwork)
# set seed
set.seed(42)
# Read in data
data <- read.csv("https://docs.google.com/uc?id=1AQva5-vDlgBcM_Tv9yrO8yMYRfQJgqo_&export=download")
n <- nrow(data)
# Treatment: does the the gov't spend too much on "welfare" (1) or "assistance to the poor" (0)
treatment <- "w"
# Outcome: 1 for 'yes', 0 for 'no'
outcome <- "y"
# Additional covariates
covariates <- c("age", "polviews", "income", "educ", "marital", "sex")
# Data preparation
data_c <- data[data[,treatment] == 0,] |> select(all_of(c(outcome, covariates)))
n_control <- nrow(data_c)
data_c_training <- data_c[1:10000,]
data_c_testing <- data_c[10001:n_control,]
# Random forest
forest <- grf::regression_forest(
X = data_c_training[,covariates],
Y = data_c_training[,outcome],
honesty = FALSE,
tune.parameters = "all",
num.trees = 1000,
seed = 42
)
# Naive Bayes
nb <- naiveBayes(
formula = as.formula(paste0(outcome, " ~ ", paste0(covariates, collapse = "+"))),
data = data_c_training
)
# Generate predictions on test data
forest_pred <- predict(forest, data_c_testing[,covariates])$predictions
nb_pred <- predict(nb, data_c_testing, type = "raw")[,2]
# Create data frame for plotting
plot_data <- data.frame(
actual = data_c_testing[,outcome],
forest_pred = forest_pred,
nb_pred = nb_pred
)
# Display Predictions vs Actual
print("Predictions vs Actual Data:")
kableExtra::kable(plot_data) |> kable_styling(bootstrap_options = c("striped", "hover")) |> scroll_box(width = "100%", height = "500px")
#| fig-width: 12
#| fig-height: 8
# Simple calibration plot with 10 bins
n_bins <- 10
# Bin the predictions
rf_bins <- cut(plot_data$forest_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
nb_bins <- cut(plot_data$nb_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
# Calculate the statistics for the Random Forest model
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(plot_data$actual, rf_bins, sd)/sqrt(count)
)
# Calculate the statistics for the Naive Bayes model
nb_bin_stats <- tibble(
bin_center = tapply(plot_data$nb_pred, nb_bins, mean),
empirical_prob = tapply(plot_data$actual, nb_bins, mean),
count = as.numeric(table(nb_bins)),
empirical_se = tapply(plot_data$actual, nb_bins, sd)/sqrt(count)
)
# Combine the statistics for the two models
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(nb_bin_stats, model = "Naive Bayes"))
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.2) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n_bins, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom")
# Create calibration plots with different numbers of bins
n_bins <- c(5, 10, 20, 100)
# Create a tibble for plotting the calibration plots
bin_stats <- tibble::tibble(bin_center = double(), empirical_prob = double(), count = double(), empirical_se = double(), model = character())
for (n in n_bins) {
# Bin the predictions
rf_bins <- cut(plot_data$forest_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
nb_bins <- cut(plot_data$nb_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
# Calculate the statistics for the Random Forest model
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(plot_data$actual, rf_bins, sd)/sqrt(count)
)
# Calculate the statistics for the Naive Bayes model
nb_bin_stats <- tibble(
bin_center = tapply(plot_data$nb_pred, nb_bins, mean),
empirical_prob = tapply(plot_data$actual, nb_bins, mean),
count = as.numeric(table(nb_bins)),
empirical_se = tapply(plot_data$actual, nb_bins, sd)/sqrt(count)
)
# Combine the statistics for the two models
bin_stats <-  bin_stats |>
bind_rows(mutate(rf_bin_stats, model = "Random Forest", n_bin = n)) |>
bind_rows(mutate(nb_bin_stats, model = "Random Forest", n_bin = n))
}
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)//2)
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2)
for (n in n_bins) {
# Bin the predictions
rf_bins <- cut(plot_data$forest_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
nb_bins <- cut(plot_data$nb_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
# Calculate the statistics for the Random Forest model
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(plot_data$actual, rf_bins, sd)/sqrt(count)
)
# Calculate the statistics for the Naive Bayes model
nb_bin_stats <- tibble(
bin_center = tapply(plot_data$nb_pred, nb_bins, mean),
empirical_prob = tapply(plot_data$actual, nb_bins, mean),
count = as.numeric(table(nb_bins)),
empirical_se = tapply(plot_data$actual, nb_bins, sd)/sqrt(count)
)
# Combine the statistics for the two models
bin_stats <-  bin_stats |>
bind_rows(mutate(rf_bin_stats, model = "Random Forest", n_bin = n)) |>
bind_rows(mutate(nb_bin_stats, model = "Naive Bayes", n_bin = n))
}
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2)
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2)
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.2) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2)
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.3) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with ", n, " bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2)
?facet_wrap
?labeller
# Create calibration plots with different numbers of bins
n_bins <- c(5, 10, 20, 100)
# Create a tibble for plotting the calibration plots
bin_stats <- tibble::tibble(bin_center = double(), empirical_prob = double(), count = double(), empirical_se = double(), model = character())
for (n in n_bins) {
# Bin the predictions
rf_bins <- cut(plot_data$forest_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
nb_bins <- cut(plot_data$nb_pred, breaks = n, labels = FALSE, include.lowest = TRUE)
# Calculate the statistics for the Random Forest model
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(plot_data$actual, rf_bins, sd)/sqrt(count)
)
# Calculate the statistics for the Naive Bayes model
nb_bin_stats <- tibble(
bin_center = tapply(plot_data$nb_pred, nb_bins, mean),
empirical_prob = tapply(plot_data$actual, nb_bins, mean),
count = as.numeric(table(nb_bins)),
empirical_se = tapply(plot_data$actual, nb_bins, sd)/sqrt(count)
)
# Combine the statistics for the two models
bin_stats <-  bin_stats |>
bind_rows(mutate(rf_bin_stats, model = "Random Forest", n_bin = n)) |>
bind_rows(mutate(nb_bin_stats, model = "Naive Bayes", n_bin = n))
}
# Create the calibration plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.3) +
geom_point(aes(x=bin_center, y=empirical_prob, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "Naive Bayes" = "green")) +
labs(title = paste0("Calibration Plot with different bins"), x=NULL, y=NULL, color = NULL) + guides(fill = "none") +
theme_minimal() + theme(legend.position = "bottom") +
facet_wrap(~ n_bin, nrow = length(n_bins)%/%2, labeller = labeller(n_bin = function(x) paste0(x, " bins")))
