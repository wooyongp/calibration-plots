empirical_prob = numeric(n_bins),
count = numeric(n_bins)
)
for (i in 1:n_bins) {
bin_indices <- which(bins == i)
if (length(bin_indices) > 0) {
bin_stats$bin_center[i] <- mean(predictions[bin_indices])
bin_stats$empirical_prob[i] <- mean(actual[bin_indices])
bin_stats$count[i] <- length(bin_indices)
}
}
# Remove empty bins
bin_stats <- bin_stats[bin_stats$count > 0, ]
# Create plot
p <- ggplot(bin_stats, aes(x = bin_center, y = empirical_prob)) +
geom_point(aes(size = count), alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
geom_smooth(method = "loess", se = TRUE, alpha = 0.3) +
labs(
title = paste("Calibration Plot:", model_name),
subtitle = paste("Number of bins:", n_bins),
x = "Predicted Probability",
y = "Empirical Probability",
size = "Sample Size"
) +
xlim(0, 1) +
ylim(0, 1) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
return(p)
}
library(plotly)
library(plotly)
library(shiny)
# Generate predictions on test data
forest_pred <- predict(forest, data_c_testing[,covariates])$predictions
svm_pred <- predict(svm, data_c_testing, probability = TRUE)
svm_pred_probs <- attr(svm_pred, "probabilities")[,2]
# Check prediction dimensions
cat("Forest predictions length:", length(forest_pred), "\n")
cat("SVM predictions length:", length(svm_pred_probs), "\n")
# Create data frame for plotting
plot_data <- data.frame(
actual = data_c_testing[,outcome],
forest_pred = forest_pred,
svm_pred = svm_pred_probs
)
# Generate predictions on test data
forest_pred <- predict(forest, data_c_testing[,covariates])$predictions
svm_pred <- predict(svm, data_c_testing, probability = TRUE)
# Create data frame for plotting
plot_data <- data.frame(
actual = data_c_testing[,outcome],
forest_pred = forest_pred,
svm_pred = svm_pred
)
plot_data
kableExtra::kable(head(plot_data))
#| warning: false
#| message: false
# load packages
library(ggplot2)
library(dplyr)
library(readr)
library(grf)
library(e1071)
library(plotly)
library(shiny)
library(htmlwidgets)
library(DT)
library(kableExtra)
# set seed
set.seed(42)
# Simple interactive calibration plot with bin selection
create_calibration_plot <- function(predictions, actual, n_bins = 10, model_name = "Model") {
# Create bins and calculate statistics
bins <- cut(predictions, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins)
)
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
size = ~count, text = ~paste("Bin:", round(bin_center, 3), "<br>Empirical:", round(empirical_prob, 3), "<br>Count:", count),
hoverinfo = "text") %>%
add_trace(type = 'scatter', mode = 'markers', name = paste(model_name, 'Predictions')) %>%
add_trace(x = c(0, 1), y = c(0, 1), type = 'scatter', mode = 'lines',
line = list(dash = 'dash', color = 'red'), name = 'Perfect Calibration') %>%
layout(title = paste("Calibration Plot:", model_name, "-", n_bins, "bins"),
xaxis = list(title = "Predicted Probability", range = c(0, 1)),
yaxis = list(title = "Empirical Probability", range = c(0, 1)))
}
predictions <- plot_data$forest_pred
actual <- plot_data$actual
bins <- cut(prediction, breaks = 10, include.lowest = T)
bins <- cut(predictions, breaks = 10, include.lowest = T)
bins
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins)
)
bin_stats
tapply(actual, bins, means)
tapply(actual, bins, mean)
?tapply
actual
empirical_sd = tapply(actual, bins, sd)
empirical_sd
empirical_prob
empirical_prob = tapply(actual, bins, mean)
empirical_prob
(empirical_prob)(1-empirical_prob)
vec <- empirical_prob |> as.vector()
vec
vec(1-vec)
(empirical_prob)*(1-empirical_prob)
sqrt((empirical_prob)*(1-empirical_prob))
empirical_sd
count
table(bins)
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins),
empirical_se = tapply(actual, bins, sd)/sqrt(table(bins)
)
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins),
empirical_se = tapply(actual, bins, sd)/sqrt(table(bins)
)
bin_stats
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins),
empirical_se = tapply(actual, bins, sd)/sqrt(table(bins))
)
bin_stats
bin_stats <- data.frame(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins),
empirical_se = tapply(actual, bins, sd)/count.Freq
)
bin_stats <- tibble(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins)
) |>
mutate(empirical_se = tapply(actual, bins, sd)/count.Freq)
tibble(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins)
)
bin_stats <- tibble(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins)
)
bin_stats
bin_stats <- tibble(
bin_center = tapply(predictions, bins, mean),
empirical_prob = tapply(actual, bins, mean),
count = table(bins),
empirical_se = tapply(actual, bins, sd)/count
)
bin_stats
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
size = ~count, text = ~paste("Bin:", round(bin_center, 3), "<br>Empirical:", round(empirical_prob, 3), "<br>Count:", count),
hoverinfo = "text") %>%
add_trace(type = 'scatter', mode = 'markers', name = paste(model_name, 'Predictions')) %>%
add_trace(x = c(0, 1), y = c(0, 1), type = 'scatter', mode = 'lines',
line = list(dash = 'dash', color = 'red'), name = 'Perfect Calibration') %>%
layout(title = paste("Calibration Plot:", model_name, "-", n_bins, "bins"),
xaxis = list(title = "Predicted Probability", range = c(0, 1)),
yaxis = list(title = "Empirical Probability", range = c(0, 1)))
model_name = "Forest"
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
size = ~count, text = ~paste("Bin:", round(bin_center, 3), "<br>Empirical:", round(empirical_prob, 3), "<br>Count:", count),
hoverinfo = "text") %>%
add_trace(type = 'scatter', mode = 'markers', name = paste(model_name, 'Predictions')) %>%
add_trace(x = c(0, 1), y = c(0, 1), type = 'scatter', mode = 'lines',
line = list(dash = 'dash', color = 'red'), name = 'Perfect Calibration') %>%
layout(title = paste("Calibration Plot:", model_name, "-", n_bins, "bins"),
xaxis = list(title = "Predicted Probability", range = c(0, 1)),
yaxis = list(title = "Empirical Probability", range = c(0, 1)))
n_bins=10
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
size = ~count, text = ~paste("Bin:", round(bin_center, 3), "<br>Empirical:", round(empirical_prob, 3), "<br>Count:", count),
hoverinfo = "text") %>%
add_trace(type = 'scatter', mode = 'markers', name = paste(model_name, 'Predictions')) %>%
add_trace(x = c(0, 1), y = c(0, 1), type = 'scatter', mode = 'lines',
line = list(dash = 'dash', color = 'red'), name = 'Perfect Calibration') %>%
layout(title = paste("Calibration Plot:", model_name, "-", n_bins, "bins"),
xaxis = list(title = "Predicted Probability", range = c(0, 1)),
yaxis = list(title = "Empirical Probability", range = c(0, 1)))
# Create interactive plot
plot_ly(bin_stats, x = ~bin_center, y = ~empirical_prob,
size = ~count) |>
add_trace(type = 'scatter', mode = 'markers', name = paste(model_name, 'Predictions')) |>
add_trace(x = c(0, 1), y = c(0, 1), type = 'scatter', mode = 'lines',
line = list(dash = 'dash', color = 'red'), name = 'Perfect Calibration') |>
layout(title = paste("Calibration Plot:", model_name, "-", n_bins, "bins"),
xaxis = list(title = "Predicted Probability", range = c(0, 1)),
yaxis = list(title = "Empirical Probability", range = c(0, 1)))
bin_stats
?pmin
plot_data
rf_bins <- cut(plot_data$forest_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
svm_bins <- cut(plot_data$svm_pred, breaks = n_bins, labels = FALSE, include.lowest = TRUE)
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = table(rf_bins),
empirical_se = tapply(actual, rf_bins, sd)/count
)
svm_bin_stats <- tibble(
bin_center = tapply(plot_data$svm_pred, svm_bins, mean),
empirical_prob = tapply(plot_data$actual, svm_bins, mean),
count = table(svm_bins),
empirical_se = tapply(actual, svm_bins, sd)/count
)
rf_bin_stats
svm_bin_stats
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(svm_bin_stats, model = "SVM"))
bin_stats
bin_stats
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7)
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(svm_bin_stats, model = "SVM")) |>
mutate(count = as.numeric(count))
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
# Create plot
ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
bin_stats
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
print(p)
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(svm_bin_stats, model = "SVM")) |>
mutate(count = as.numeric(count))
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
p
bin_stats
rf_bins
rf_bin_stats <- tibble(
bin_center = tapply(plot_data$forest_pred, rf_bins, mean),
empirical_prob = tapply(plot_data$actual, rf_bins, mean),
count = as.numeric(table(rf_bins)),
empirical_se = tapply(actual, rf_bins, sd)/count
)
svm_bin_stats <- tibble(
bin_center = tapply(plot_data$svm_pred, svm_bins, mean),
empirical_prob = tapply(plot_data$actual, svm_bins, mean),
count = as.numeric(table(svm_bins)),
empirical_se = tapply(actual, svm_bins, sd)/count
)
bin_stats <-  mutate(rf_bin_stats, model = "Random Forest") |>
bind_rows(mutate(svm_bin_stats, model = "SVM"))
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green"))
p
print(p)
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x="none", y="none") +
theme_minimal()
print(p)
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_errorbar(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, color = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se),
width = 0.02, alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
print(p)
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model), alpha = 0.7) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL) +
theme_minimal()
p
theme_minimal()
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(size = NULL, fill = NULL) +
theme_minimal()
p
theme_minimal()
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(fill = "none", size = "none")+
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) +
guides(fill = "none", size = "none") + theme(legend.position = "bottom")
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") + theme(legend.position = "bottom") +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") + theme(legend.position = "bottom") +
theme_minimal()
p
# Create plot
p <- ggplot(bin_stats) +
geom_abline(aes(slope = 1, intercept = 0, color = "Perfect Calibration"), linetype = "dashed") +
geom_ribbon(aes(x = bin_center, y = empirical_prob, fill = model,
ymin = empirical_prob - 1.96 * empirical_se,
ymax = empirical_prob + 1.96 * empirical_se), alpha = 0.5) +
geom_point(aes(x=bin_center, y=empirical_prob, size=count, color = model)) +
scale_color_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
scale_fill_manual(values = c("Perfect Calibration" = "red", "Random Forest" = "blue", "SVM" = "green")) +
labs(x=NULL, y=NULL, color = NULL) + guides(fill = "none", size = "none") +
theme_minimal() + theme(legend.position = "bottom")
p
#| warning: false
#| message: false
# load packages
library(tibble)
library(ggplot2)
library(dplyr)
library(readr)
library(grf)
library(e1071)
library(plotly)
library(shiny)
library(htmlwidgets)
library(DT)
library(kableExtra)
# set seed
set.seed(42)
# Read in data
data <- read.csv("https://docs.google.com/uc?id=1AQva5-vDlgBcM_Tv9yrO8yMYRfQJgqo_&export=download")
reticulate::repl_python()
n <- nrow(data)
# Treatment: does the the gov't spend too much on "welfare" (1) or "assistance to the poor" (0)
treatment <- "w"
# Outcome: 1 for 'yes', 0 for 'no'
outcome <- "y"
# Additional covariates
covariates <- c("age", "polviews", "income", "educ", "marital", "sex")
reticulate::repl_python()
